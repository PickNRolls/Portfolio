// Generated by CoffeeScript 2.0.1
(function() {
  var Clock, Counter, ElementCoordinate, ScrollSlider, SelectList, Widget, clock, counter, scrollSlider, selectList,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ElementCoordinate = class ElementCoordinate {
    constructor(_elem) {
      this._elem = _elem;
      this.top = this._elem.getBoundingClientRect().top + pageYOffset;
      this.left = this._elem.getBoundingClientRect().left + pageXOffset;
    }

    refresh() {
      this.top = this._elem.getBoundingClientRect().top + pageYOffset;
      return this.left = this._elem.getBoundingClientRect().left + pageXOffset;
    }

  };

  Widget = class Widget {
    constructor(config) {
      var arr, ref, ref1;
      this._elem = (function() {
        if ((ref = config.element) != null) {
          return ref;
        } else {
          throw new Error('No element for widget!');
        }
      })();
      if (typeof config.classes === 'string') {
        arr = [];
        arr.push(config.classes);
        this._classes = arr;
      } else {
        this._classes = (ref1 = config.classes) != null ? ref1 : [];
      }
    }

    start() {
      return new Throw('Method start must be overriden!');
    }

    getElement() {
      return this._elem;
    }

    getClassList(likeString) {
      if (likeString) {
        return this._classes.join(' ');
      }
      return this._classes;
    }

    //################
    // Private methods
    //################
    _init() {
      var className, i, len, ref, results;
      ref = this._classes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        className = ref[i];
        results.push(this._elem.classList.add(className));
      }
      return results;
    }

  };

  Clock = class Clock extends Widget {
    constructor(config) {
      var ref;
      super(config);
      this.stop = this.stop.bind(this);
      this._stopAnimateGhost = this._stopAnimateGhost.bind(this);
      this.clickable = (ref = config.clickable) != null ? ref : false;
      this._classes.push('clock-widget');
      this._clockId = null;
      this._timeNow = null;
      this._hour = null;
      this._minute = null;
      this._second = null;
      this._ghost = {
        elem: null,
        i: 1,
        reverse: false,
        id: null
      };
      this._init();
    }

    start() {
      this._elem.classList.remove('clock-widget-stopped');
      return this._tick();
    }

    stop() {
      boundMethodCheck(this, Clock);
      clearInterval(this._clockId);
      this._elem.classList.add('clock-widget-stopped');
      return this._startGhost();
    }

    toggle() {
      if (this._elem.classList.contains('clock-widget-stopped')) {
        return this.start();
      } else {
        return this.stop();
      }
    }

    //################
    // Private methods
    //################
    _init() {
      super._init();
      if (this.clickable) {
        this._elem.addEventListener('click', this.toggle.bind(this));
        return this._elem.style.cursor = 'pointer';
      }
    }

    _tick() {
      var func;
      (func = () => {
        this._timeNow = new Date;
        this._hour = '' + this._timeNow.getHours();
        this._minute = '' + this._timeNow.getMinutes();
        this._second = '' + this._timeNow.getSeconds();
        this._check();
        return this._render();
      })();
      return this._clockId = setInterval(func, 1000);
    }

    _check() {
      if (this._hour.length === 1) {
        this._hour = 0 + this._hour;
      }
      if (this._minute.length === 1) {
        this._minute = 0 + this._minute;
      }
      if (this._second.length === 1) {
        return this._second = 0 + this._second;
      }
    }

    _render() {
      return this._elem.textContent = `${this._hour}:${this._minute}:${this._second}`;
    }

    _startGhost() {
      var elemCoord, style;
      elemCoord = new ElementCoordinate(this._elem);
      this._ghost.elem = this._elem.cloneNode(true);
      style = this._ghost.elem.style;
      style.cursor = 'default';
      style.top = elemCoord.top + 'px';
      style.left = elemCoord.left + 'px';
      this._ghost.elem.classList.add('clock-widget-ghost');
      document.body.append(this._ghost.elem);
      this._ghost.i = 1;
      this._ghost.reverse = false;
      this._ghost.id = null;
      return this._animateGhost();
    }

    _animateGhost() {
      this._ghost.elem.style.transform = `scale(${this._ghost.i})`;
      this._ghost.id = requestAnimationFrame(this._animateGhost.bind(this));
      if (this._ghost.i > 1.5) {
        this._ghost.reverse = true;
      }
      if (this._ghost.reverse) {
        this._ghost.i -= .1;
        if (this._ghost.i === .9) {
          this._stopAnimateGhost();
        }
        return;
      }
      return this._ghost.i += .1;
    }

    _stopAnimateGhost() {
      boundMethodCheck(this, Clock);
      cancelAnimationFrame(this._ghost.id);
      return this._ghost.elem.remove();
    }

  };

  ScrollSlider = class ScrollSlider extends Widget {
    constructor(config) {
      super(config);
      this._mousemove = this._mousemove.bind(this);
      this._mouseup = this._mouseup.bind(this);
      this._classes.push('scroll-slider');
      this._scroll = null;
      this._sliderWidth = null;
      this._sliderCoord = null;
      this._scrollWidth = null;
      this._scrollCoord = null;
      this._scrollWidth = null;
      this._dragged = false;
    }

    start() {
      this._init();
      return this._handleListeners();
    }

    //################
    // Private methods
    //################
    _init() {
      super._init();
      if (!this._elem.querySelector('[data-scroll-slider]')) {
        this._scroll = document.createElement('div');
        this._scroll.setAttribute('data-scroll-slider', 'on');
        this._scroll.classList.add('scroll');
        this._elem.insertBefore(this._scroll, this._elem.firstChild);
      }
      this._sliderWidth = this._elem.offsetWidth;
      this._sliderCoord = new ElementCoordinate(this._elem);
      return this._scrollWidth = this._scroll.offsetWidth;
    }

    _handleListeners() {
      this._elem.addEventListener('mousedown', (e) => {
        this._mousedown(e);
        document.addEventListener('mousemove', this._mousemove);
        this._elem.ondrag = function() {
          return false;
        };
        return document.addEventListener('mouseup', this._mouseup);
      });
      return this._elem.addEventListener('click', (e) => {
        var target;
        target = e.target;
        if (!target.classList.contains('scroll-slider') || target.getAttribute('data-scroll-slider')) {
          return;
        }
        return this._scroll.style.left = e.pageX - this._sliderCoord.left - this._scrollWidth / 2 + 'px';
      });
    }

    _mousedown(e) {
      var target;
      target = e.target;
      if (!target.classList.contains('scroll')) {
        return;
      }
      this._scrollCoord = new ElementCoordinate(target);
      document.body.style.cursor = 'pointer';
      return this._dragged = true;
    }

    _mousemove(e) {
      boundMethodCheck(this, ScrollSlider);
      if (!this._dragged) {
        return;
      }
      this._scroll.style.left = e.pageX - this._sliderCoord.left + 'px';
      this._scrollCoord.refresh();
      return this._checkEdges();
    }

    _mouseup() {
      boundMethodCheck(this, ScrollSlider);
      document.removeEventListener('mousemove', this._mousemove);
      document.removeEventListener('mouseup', this._mouseup);
      this._dragged = false;
      return document.body.style.cursor = '';
    }

    _checkEdges() {
      var leftEdge, rightEdge;
      rightEdge = this._sliderWidth - this._scrollWidth;
      leftEdge = this._scrollCoord.left - this._sliderCoord.left;
      if (leftEdge < 0) {
        this._scroll.style.left = 0;
      }
      if (leftEdge > rightEdge) {
        return this._scroll.style.left = rightEdge + 'px';
      }
    }

  };

  SelectList = class SelectList extends Widget {
    constructor(config) {
      super(config);
      this._classes.push('select-list');
      this._items = [];
      this._selected = [];
      this._lastClicked = null;
    }

    getSelected() {
      return this._selected;
    }

    getItems() {
      return this._items;
    }

    start() {
      this._init();
      return this._handleListeners();
    }

    //################
    // Private methods
    //################
    _init() {
      var element, i, len, ref, results;
      super._init();
      ref = this._elem.children;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        element = ref[i];
        if (element.tagName !== 'LI') {
          continue;
        }
        element.classList.add('select-list__item');
        results.push(this._items.push(element));
      }
      return results;
    }

    _handleListeners() {
      this._elem.addEventListener('click', (e) => {
        var target;
        target = this._checkClick(e);
        if (target === false) {
          return;
        }
        if (e.ctrlKey) {
          this._selectWithCtrl(target);
          return;
        }
        if (e.shiftKey) {
          this._selectWithShift(target);
          return;
        }
        return this._select(target);
      });
      return this._elem.onselectstart = function() {
        return false;
      };
    }

    _checkClick(e) {
      var target;
      target = e.target;
      if (target.classList.contains('select-list')) {
        return false;
      }
      while (!target.classList.contains('select-list__item')) {
        target = target.parentElement;
      }
      if (target.classList.contains('select-list__item')) {
        return target;
      } else {
        return false;
      }
    }

    _selectWithCtrl(target) {
      target.classList.toggle('selected');
      this._lastClicked = target;
      return this._pushSelected();
    }

    _select(target) {
      var i, item, len, ref;
      ref = this._items;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        item.classList.remove('selected');
      }
      target.classList.add('selected');
      this._lastClicked = target;
      return this._pushSelected();
    }

    _selectWithShift(target) {
      var next, position, previous;
      position = this._lastClicked.compareDocumentPosition(target);
      if (position === 2) {
        while (previous !== target) {
          previous = this._lastClicked.previousElementSibling;
          previous.classList.add('selected');
          this._lastClicked = previous;
        }
      } else if (position === 4) {
        while (next !== target) {
          next = this._lastClicked.nextElementSibling;
          next.classList.add('selected');
          this._lastClicked = next;
        }
      }
      return this._pushSelected();
    }

    _pushSelected() {
      var i, item, len, ref, results;
      this._selected = [];
      ref = this._items;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        if (item.classList.contains('selected')) {
          results.push(this._selected.push(item));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }

  };

  Counter = class Counter extends Widget {
    constructor(config) {
      var ref;
      super(config);
      this._classes.push('counter-widget');
      this._panel = null;
      this._step = (ref = config.step) != null ? ref : 1;
      this._num = 0;
    }

    start() {
      return this._init();
    }

    getValue() {
      return this._num;
    }

    //################
    // Private methods
    //################
    _init() {
      super._init();
      this._createButtons();
      this._handleListeners();
      return this._append();
    }

    _createButtons() {
      this._minus = document.createElement('div');
      this._minus.classList.add('counter-widget__minus');
      this._minus.textContent = '-';
      this._plus = document.createElement('div');
      this._plus.classList.add('counter-widget__plus');
      this._plus.textContent = '+';
      this._panel = document.createElement('div');
      this._panel.classList.add('counter-widget__panel');
      return this._panel.textContent = 0;
    }

    _handleListeners() {
      this._minus.addEventListener('click', () => {
        this._changeCurrentNum(true);
        return this._renderNum();
      });
      this._plus.addEventListener('click', () => {
        this._changeCurrentNum(false);
        return this._renderNum();
      });
      this._minus.onselectstart = function() {
        return false;
      };
      return this._plus.onselectstart = function() {
        return false;
      };
    }

    _renderNum() {
      return this._panel.textContent = this._num;
    }

    _changeCurrentNum(minus) {
      if (minus) {
        this._num -= this._step;
        if (this._num < 0) {
          this._num = 0;
        }
        return;
      }
      return this._num += this._step;
    }

    _append() {
      return this._elem.append(this._minus, this._panel, this._plus);
    }

  };

  clock = new Clock({
    element: document.getElementById('clock'),
    classes: 'my-clock',
    clickable: true
  });

  window.clock = clock;

  clock.start();

  scrollSlider = new ScrollSlider({
    element: document.getElementById('scroll-slider'),
    classes: 'my-slider'
  });

  window.scrollSlider = scrollSlider;

  scrollSlider.start();

  selectList = new SelectList({
    element: document.getElementById('select-list'),
    classes: 'my-list'
  });

  window.selectList = selectList;

  selectList.start();

  counter = new Counter({
    element: document.getElementById('counter'),
    classes: 'my-counter',
    step: 2
  });

  window.counter = counter;

  counter.start();

  document.addEventListener('selectstart', function(e) {
    return e.preventDefault();
  });

}).call(this);
